$r_commentary1 =
  'matchオブジェクトは指定した正規表現によるマッチングを行います。
今回は引数に/4/が指定されています。
マッチした場合にはMatchDataオブジェクトを返しますが、マッチしない場合はnilを返します。
今回はマッチしないので「nil」と表示されます'

$r_commentary2 =
  '正規表現オブジェクトは「/」で囲むと正規表現オブジェクトが生成されます。
よってここでは「Regexp」と表示されます。
また「"」で囲むと文字列オブジェクトが生成されます。'

$r_commentary3 = 
  '正規表現リテラルはfreezeされます(Ruby3.00より)
よって「true」と表示されます。'
  
$r_commentary4 =
  '正規表現オブジェクトはパーセント記法で生成することが出来ます。
ここでは%rを指定することで生成することが可能で実行結果は/regexp/と表示されます。'

$r_commentary5 =
  'subメソッドは指定したパターンにマッチした最初の部分を特定の文字列に置換するメソッドです。
また「.」はメタ文字で改行を除く任意の１文字を示します。
よってここでは1がマッチして"a"に置換されますので"a23"と表示されます。'

$r_commentary6 =
  'gsubメソッドはマッチした全ての部分を特定の文字列に置換します。
「.」はメタ文字で改行を除く任意の１文字を示します。
ここでは1,2,3がそれぞれマッチしますので"aaa"と表示されます。'

$r_commentary7 =
  'subメソッドは指定したパターンにマッチした最初の部分を特定の文字列に置換するメソッドです。
このメソッドはブロックを取ることができて、その場合にはマッチした部分がブロック引数に渡されます。
そしてブロックの実行結果と置換されます。
またd{1,2}が示すことは1文字以上2文字以下の数値となりますのでここでは"12"がマッチして"a"に置換されます。
よって"a3"と表示されます。'

$r_commentary8 =
  'subメソッドは指定したパターンにマッチした最初の部分を特定の文字列に置換するメソッドです。
このメソッドはブロックを取ることができて、その場合にはマッチした部分がブロック引数に渡されます。
そしてブロックの実行結果と置換されます。
またd{1,3}が示すことは1文字以上3文字以下の数値となりますのでここでは"123"と"123"がマッチして全て"a"に置換されます。
よって"a, a"と表示されます。'

$r_commentary9 =
  '=~メソッドはマッチした位置のインデックスが返ります。マッチしなければnilが返ります。
「\D」は数字以外の１文字を示すメタ文字です。
ここでは"a"がマッチしますので「3」と表示されます。'

$r_commentary10 =
  '=~メソッドはマッチした位置のインデックスが返ります。マッチしなければnilが返ります。
「\s」は空白文字を示すメタ文字です。
空白文字は存在しないので「nil」と表示されます。'

$r_commentary11 =
  '===メソッドはマッチするとtrueが返り、マッチしなければfalseが返ります。
ここでは"r"にマッチするパターンがないので「false」と表示されます。'

$r_commentary12 =
  '===メソッドはマッチするとtrueが返り、マッチしなければfalseが返ります。
ここでは"reg"にマッチするパターンが存在するので「true」と表示されます。'

$r_commentary13 =
  'scanメソッドはマッチした部分文字列の配列を返します。
[^a]が示すのは"a"以外です。
よってここでは["b", "c", "d", "e"]と表示されます。'

$r_commentary14 =
  'match?メソッドは指定された文字列に対して正規表現によるマッチングを行います。[]?は空白があるかないかを検証しています。
ですので"abcde"にマッチしますので「true」と表示されます。'

$r_commentary15 =
  'scanメソッドはマッチした部分文字列の配列を返します。
よって実行結果は配列なので「Array」と表示される'

$r_commentary16 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\wは英数字と_を示すメタ文字です。
よってここでマッチして返される配列は["a", "b", "c", "1", "2", "3", "A", "B", "C"]となりますので実行結果は「9」と表示されます。'

$r_commentary17 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\w{1,3}は1文字以上、3文字以下の英数字もしくは_を示すメタ文字です。
よってここでマッチして返される配列は["abc", "123", "AB"]となりますので実行結果は「3」と表示されます。'

$r_commentary18 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\w\wは2文字の英数字もしくは_を示すメタ文字です。
よってここでマッチして返される配列は ["ab", "c1", "23", "AB"]となりすので実行結果は「4」と表示されます。'

$r_commentary19 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\Wは英数字と_以外示すメタ文字です。
よってここでマッチして返される配列は [" "]となりますので「1」と表示されます。'

$r_commentary20 = 
  'scanメソッドはマッチした部分文字列の配列を返します。
\sは空白文字を示すメタ文字です。
よってここでマッチして返される配列は[" "]となりますので「1」と表示されます。'

$r_commentary21 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\sは空白文字を示すメタ文字です。
\sには改行文字も含まれる為、マッチして返される配列は["\n", " "]となりますので実行結果は「2」となります。'

$r_commentary22 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\Sは空白文字以外を示すメタ文字です。
よってマッチして返される配列は["a", "b", "c", "1", "2", "3", "A", "B", "C"]となりますので実行結果は「9」となります。'

$r_commentary23 =
  'scanメソッドはマッチした部分文字列の配列を返します。
\Dは数字以外を示すメタ文字です。
よってマッチして返される配列は["a", "b", "c", "A", "B", "C"]となりますので実行結果は「6」となります。'

$r_commentary24 =
  'マッチした文字列を取り出すには、=~演算子と同じスコープで組み込み変数を使用します。
「$`」はマッチした文字列より前の文字列を参照します。
よってここでは"xx"と表示されます。'

$r_commentary25 =
  'マッチした文字列を取り出すには、=~演算子と同じスコープで組み込み変数を使用します。
「$&」はマッチした文字列を取り出します。
よってここでは"yy"と表示されます。'

$r_commentary26 =
  'マッチした文字列を取り出すには、=~演算子と同じスコープで組み込み変数を使用します。
$‘」は マッチした文字列より後の文字列を参照します。
よってここでは"zz"と表示されます。'

$r_commentary27 =
  '正規表現リテラルでは末尾にオプションを指定することが出来ます。
ここではiオプションが指定されています。
iオプションは大文字と小文字を区別しないオプションです。
よってここでは「true」と表示されます。'

$r_commentary28 =
  '/xxy{2}zz/は"xxyyzz"とマッチします。
よってここでは「false」と表示されます。'

$r_commentary29 =
  '\Aは文字列の先頭にマッチします。
\dは数字を表すメタ文字です。
*は0回以上の繰り返しを表します。
よってここでは[""]と表示されます。'

$r_commentary30 =
  '\zは文字列の末尾にマッチします。
\dは数字を表すメタ文字です。
+は1回以上の繰り返しを表します。
よってここでは["1111"]と表示されます。'

$r_commentary31 = 
  '\zは文字列の末尾にマッチします。
  \dは数字を表すメタ文字です。
  +は1回以上の繰り返しを表します。
  末尾にあるのは数字ではありません。よってここでは[]と表示されます。'
  
$r_commentary32 =
  '\d{2,5}が表すのは2文字以上5文字以下の数字です。
ここでマッチして返される配列は["11", "111", "1111", "11111"]となります。'

$r_commentary33 =
  '\d{3,}が表すのは直前の数字の最低3回以上の繰り返しを表します。
よってここでマッチして返される配列は["111", "1111", "11111"]となります。'

$r_commentary34 =
  '\d{4}が表すのは4文字の数字の繰り返しを表します。
  よってここでマッチして返される配列は["1111", "1111"]となります。'
  
$r_commentary35 =
  '正規表現のパターンを()の様に丸括弧で囲むことによってグループ化することが出来ます。
そしてマッチした結果は特殊変数$1,$2の様に$数字で取り出すことが出来ます。
最初にマッチしているのはhttps://で始まるパターンにマッチしますのでここでは"https://www.rubymania.info/"と表示されます。'

$r_commentary36 =
  '正規表現のパターンを()の様に丸括弧で囲むことによってグループ化することが出来ます。
そしてマッチした結果は特殊変数$1,$2の様に$数字で取り出すことが出来ます。
ここで2番目にマッチしているのはwの1回以上の繰り返しがグループ化されていまので"www"と表示されます。'

$r_commentary37 =
  '正規表現のパターンを()の様に丸括弧で囲むことによってグループ化することが出来ます。
そしてマッチした結果は特殊変数$1,$2の様に$数字で取り出すことが出来ます。
ここで3番目にマッチしているのは任意の1文字です。よってここでは"."と表示されます。'
  
$r_commentary38 =
  '正規表現のパターンを()の様に丸括弧で囲むことによってグループ化することが出来ます。
そしてマッチした結果は特殊変数$1,$2の様に$数字で取り出すことが出来ます。
ここで4番目にマッチしているのは.以降の1文字以上の文字の繰り返しです。
よってここでは"rubymania.info"と表示されます。'

$r_commentary39 =
  '正規表現のパターンを()の様に丸括弧で囲むことによってグループ化することが出来ます。
そしてマッチした結果は特殊変数$1,$2の様に$数字で取り出すことが出来ます。
しかしここではマッチするパターンはありません。よってその場合は「nil」と表示されます。'

$r_commentary40 =
  'scanメソッドはマッチした部分文字列の配列を返します。
オプションを指定しない場合は大文字と小文字を区別しますのでここでは何もマッチしない為、[]と表示されます。
大文字と小文字を区別しない様にする場合はiオプションを使用します。
obj = "RUbyMania"
p obj.scan(/rubymania/i)
とすることでマッチします。'

$r_commentary41 =
  'scanメソッドはマッチした部分文字列の配列を返します。
iオプションを使用することで小文字と大文字を区別しなくなりますのでここではマッチします。
よって["RUbyMania"]と表示されます。'

$r_commentary42 =
  '解説はありません。'

$r_commentary43 =
  '解説はありません。'
  
$r_commentary44 =
  '解説はありません。'
  
$r_commentary45 =
  '解説はありません。'
  
$r_commentary46 =
  '解説はありません。'
  
$r_commentary47 =
  '解説はありません。' 
  
$r_commentary48 = 
  '解説はありません。'
  
$r_commentary49 =
  '解説はありません。'

$r_commentary50 =
  '解説はありません。'
  
$r_commentary51 =
  '解説はありません。'
  
$r_commentary52 =
  '解説はありません。'
  
$r_commentary53 =
  '解説はありません。'
  
$r_commentary54 =
  '解説はありません。'

$r_commentary55 =
  '解説はありません。'
  
$r_commentary56 =
  '解説はありません。'
  
$r_commentary57 =
  '解説はありません。'
  
$r_commentary58 =
  '解説はありません。'
  
$r_commentary59 =
  '解説はありません。'
  